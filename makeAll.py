import os
import sys
import time
from markdown_it import MarkdownIt
import dominate
from dominate.tags import *
from dominate.util import raw,text

import json
from datetime import datetime

IGNORE = "X_" # dessa kataloger och filer ignoreras i AUTO

mdit = MarkdownIt('commonmark', {'breaks':False,'html':True}).enable('table')
# print(mdit.render("*adam*"))
# mdit.options['maxNesting'] = 100

news = []

with open("settings.json","r") as f:
	settings = json.loads(f.read())
	ROOT = settings['patches']['ROOT']

def done(a,b):
	if settings['All']: return False
	if not os.path.exists(b): return False
	return os.path.getmtime(a) <= os.path.getmtime(b)

def minTitel(s):
	return s.replace('.md','').replace('_',' ')

def patch(s):
	patches = settings['patches']
	for key in patches:
		s = s.replace(key,patches[key])
	return s

def wrapMD(htmlFile, txt, mdFile, titel, level):
	# htmlFile: path/adam.html
	# txt:      innehållet från md-generatorn
	# mdFile:   path/adam.md
	# titel:    adam

	doc = getDoc(titel, level+1)
	raw_doc = doc.render()
	header = h1(a(titel,href=mdFile)).render()
	print(header)
	raw_doc = raw_doc.replace('<body></body>','<body>' + header + txt + '</body>')
	#print('wrapMD',htmlFile,raw_doc)

	with open(htmlFile, 'w', encoding='utf8') as g:
		print('WRITING',htmlFile)
		if 'Externa' in htmlFile:
			z=99
		g.write(raw_doc)


def getDoc(t,level): # hanterar toppnivå + style.css
	doc = dominate.document(title=t)
	with doc.head:
		meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
		meta(charset="utf-8")
		start = 0 if level <= 1 else 1
		for i in reversed(range(start,level)):
			link(href= f"{i * '../'}style.css", rel="stylesheet", type="text/css")
	return doc

def wrapHtml(original, filename, t, level, links=[]):
	# print('content',content)
	# print('wrapHtml',original)
	t = minTitel(t)
	index = 1 + filename.rindex("/")
	short_md = filename[index:].replace('.html','.md')
	long_md = filename.replace('.html','.md')

	doc = getDoc(t,level)
	# doc = dominate.document(title=t)
	# with doc.head:
	# 	meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
	# 	meta(charset="utf-8")
	# 	start = 0 if level <= 1 else 1
	# 	for i in reversed(range(start,level)):
	# 		link(href= f"{i * '../'}style.css", rel="stylesheet", type="text/css")

	with doc.body:
		if level == 1:
			with table(tr(cls="vinjett", height="100px")):
				with td():
					with a(href="../Seniorschack_Stockholm/Xperiment/Föredrag/Lewis_Chess_Men/"):
						img(height="200px", src=f"{(level-1) * '../'}X_bilder/knight2.png")
				td("Seniorschack Stockholm",cls='vinjett')
	   
		if os.path.exists(long_md):
			h1(a(t, href=short_md))
		else:
			h1(t)

	with doc.body:

		# if txt == "":
			# if nyheter: news = links
			with table():
				for [titel,href] in links:
					with tr():
						with td():
							a(titel.replace('_',' '), href=convert(href))
			if level == 0:
				div(str(datetime.now())[:16], style="font-size:16px")

		# else: # text
		# 	text(txt)

	# print(doc)


	# res = [
	# 	f"<!-- Generated by makeAll.py 1.0 from {original} -->",
	# 	'<html>',
	# 	'	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />',
	# 	'	<head>',
	# 	f'		<title>{t}</title>',
	# 	# '		<link rel="icon" type="image/x-icon" href="favicon.ico">',
	# 	'		<meta charset = "utf-8"/>'
	# ]

	# # CSS bör gälla i katalogerna nedanför den egna.
	# # Undantaget är roten, där css-filen gäller i alla fall.
	# # Hanteras med variablen start nedan.
	# # Behövs det unik css-kod i en viss fil kan den läggas in mha <style></style> i .md-filen.
	# # Denna gäller då enbart i denna enda fil.
	# start = 0 if level <= 1 else 1
	# for i in reversed(range(start,level)):
	# 	res.append('		<link href="' + i * '../' + 'style.css" rel="stylesheet" type="text/css" >')
	# res.append('	</head>')
	# res.append('<body>')

	# if level == 1:
	# 	res.append('<table>')
	# 	res.append('<tr class=vinjett height=100px><td>')
	# 	res.append('<a href="../Seniorschack_Stockholm/Xperiment/F%C3%B6redrag/Lewis_Chess_Men/">')
	# 	res.append("<img height=200px src=" + (level-1) * '../' + "X_bilder/knight2.png ></a>")
	# 	res.append("</td><td class=vinjett>Seniorschack Stockholm</td></tr>")
	# 	res.append('</table>')

	# else:
	# 	if os.path.exists(long_md):
	# 		res += [f'<h1><a href="{short_md}">{t}</a> </h1>']
	# 	else:
	# 		res += [f'<h1>{t}</h1>']

	# res += [content,'</body>','</html>']

	res = doc.render()


	with open(filename, 'w', encoding='utf8') as g:
		print('WRITING',filename)
		# s = '\n'.join(res)
		g.write(res)
		# print('AUTO',filename)

def noExt(s):
	s = s.replace("_", " ")
	if settings['showExt']: return s
	else:
		p = s.rindex('.')
		if p: return s[:p]
		return s

def getLink(f):
	with open(f,encoding='utf8') as f1:
		link = f1.read().strip()
		return patch(link)

def makeMenu(href,titel): return [titel, href]

def yymm(): return str(datetime.now())[:7]	

def convert(href):
	# titel = titel.replace('_',' ')
	if href == 'Nyheter': href = f"Nyheter/{yymm()}.html"
	return href

def transpileDir(directory, level=0):
	global news
	if type(directory) is str:
		path = directory
		name = directory
		nyheter = False
		dokument = False 
	else:
		path = directory.path
		name = directory.name
		nyheter = path.endswith('\\Nyheter') 
		dokument = path.endswith('\\Dokument')
	if name == 'Externa_länkar':
		z=99

	if name.endswith('.css'): return

	name = name.replace("_", " ")

	hash_html = []
	hash_link = []
	hash_directory = []
	hash_others = []

	indexHtml = ""

	for f in os.scandir(path):
		if os.path.isfile(f) and f.name.endswith('.md'):
			htmlFile = f.path.replace('.md','.html').replace('\\', '/')
			if done(f.path, htmlFile): continue
			html = MD2HTML(f.path)
			wrapMD(htmlFile,html,f.path,f.name,level)
					# with open(filename, 'w', encoding='utf8') as g:
						# s = '\n'.join(res)
						# g.write(html)
						# wrapHtml('markdown ' + f.path, filename, f.name, level + 1, links=[], txt=html) # Använd INTE dominate för markdown-genererat material

	for f in os.scandir(path):
		if os.path.isfile(f):
			if f.name.endswith('.md'): pass
			elif f.name.endswith('.html'): hash_html.append(f)
			elif f.name.endswith('.link'): hash_link.append(f)
			elif f.name not in ['favicon.ico','style.css']:
				if not f.name.startswith(IGNORE): hash_others.append(f)
		else:
			# print('f.name',f.name)
			if not f.name.startswith(IGNORE): hash_directory.append(f)

	links = [[noExt(f.name), f.name] for f in hash_html if f.name != 'index.html'] 
	links += [[noExt(f.name),getLink(f.path)] for f in hash_link] 
	links += [[noExt(f.name), f.name] for f in hash_others] 
	for f in hash_directory: 
		links += [[f.name.replace("_", " "), f.name]]
		#print('f.name',f.name)
		if f.name != 'Förklaring':
			transpileDir(f, level + 1)

	links.sort()
	if nyheter or dokument: links.reverse()



		

	# res = "<table>\n" + "\n".join(res) + "\n</table>"
	# res = [f"\t<tr><td><a href='{convert(href)}'>{title.replace('_',' ')}</a></td></tr>" for [title,href] in res]
	# if nyheter: news = res

	# if level == 0: 
	# 	res += f'<div style="font-size:16px">{str(datetime.now())[:16]}</div>'
		# res += news

	# indexHtml = res if indexHtml == "" else indexHtml.replace("AUTO",res)
	wrapHtml('directory ' + name, path + '/index.html', name, level+1, links)

def MD2HTML(mdPath):
	with open(mdPath,encoding='utf8') as f:
		md = f.read()
		html = mdit.render(md)
		return patch(html)

start = time.time_ns()
transpileDir(ROOT)
print(round((time.time_ns() - start)/10**6),'ms')
print(sys.version)
print()
