import os
import sys
import time
from markdown_it import MarkdownIt
import json
from datetime import datetime

IGNORE = "X_" # dessa kataloger och filer ignoreras i AUTO
mdit = MarkdownIt('commonmark', {'breaks':False,'html':True}).enable('table')
templates = {}

with open('page.template',       'r', encoding='utf8') as f: templates['page'] = f.read()
with open('page_start.template', 'r', encoding='utf8') as f: templates['page_start'] = f.read()

with open("settings.json","r") as f:
	settings = json.loads(f.read())
	ROOT = settings['patches']['ROOT']

def patch(s):
	patches = settings['patches']
	for key in patches:
		s = s.replace(key,patches[key])
	return s

def wrapHtml(original, filename, t, level, content=""):
	t = pretty(t)
	index = 1 + filename.rindex("/")
	short_md = filename[index:].replace('.html','.md')
	long_md = filename.replace('.html','.md')

	header = f"<a href='{short_md}'>{t}</a>" if os.path.exists(long_md) else t

	styles = [f'\t\t<link href="{'../' * i}style.css" rel="stylesheet" type="text/css" />' for i in reversed(range(level))]
	styles = "\n".join(styles)

	if level==1: template = templates['page_start']
	else: template = templates['page']
	with open(filename, 'w', encoding='utf8') as g:
		s = f"<!-- Generated by makeAll.py 1.0 from {original} -->\n"
		s += template
		s = s.replace('_HEADER_',header).replace('_BODY_',content).replace('_TITLE_',t).replace('_STYLES_',styles)
		g.write(s)

def noExt(s):
	s = s.replace("_", " ")
	if settings['showExt']: return s
	else:
		p = s.rindex('.')
		if p: return s[:p]
		return s

def getLink(f): 
	with open(f,encoding='utf8') as f1: return patch(f1.read().strip())

def makeMenu(href,title): return [title, href]
def yymm():         return str(datetime.now())[:7]
def yymmddhhmmss(): return str(datetime.now())[:16]
def pretty(s): return s.replace('.md','').replace('_',' ')
def convert(href): return f"Nyheter/{yymm()}" if href == 'Nyheter' else href

def transpileDir(directory, level=0):
	if type(directory) is str:
		path = directory
		name = directory
		nyheter = False
		dokument = False 
	else:
		path = directory.path
		name = directory.name
		nyheter = path.endswith('\\Nyheter') 
		dokument = path.endswith('\\Dokument')

	if name.endswith('.css'): return

	name = name.replace("_", " ")

	hash_html = []
	hash_link = []
	hash_directory = []
	hash_others = []

	indexHtml = ""

	for f in os.scandir(path):
		if os.path.isfile(f) and f.name.endswith('.md'):
			if f.name == 'index.md':
				indexHtml = MD2HTML(f.path)
			else:
				html = MD2HTML(f.path)
				if html:
					filename = f.path.replace('.md', '.html').replace('\\', '/')
					wrapHtml('markdown ' + f.path, filename, f.name, level + 1, html)

	for f in os.scandir(path):
		if os.path.isfile(f):
			if f.name.endswith('.md'): pass
			elif f.name.endswith('.html'): hash_html.append(f)
			elif f.name.endswith('.link'): hash_link.append(f)
			elif f.name not in ['favicon.ico','style.css']:
				if not f.name.startswith(IGNORE): hash_others.append(f)
		elif not f.name.startswith(IGNORE): hash_directory.append(f)

	res = [[noExt(f.name), f.name] for f in hash_html if f.name != 'index.html'] 
	res += [[noExt(f.name),getLink(f.path)] for f in hash_link] 
	res += [[noExt(f.name), f.name] for f in hash_others] 
	for f in hash_directory: 
		res += [[f.name.replace("_", " "), f.name]]
		if f.name != 'FÃ¶rklaring': transpileDir(f, level + 1)

	res.sort()
	if nyheter or dokument: res.reverse()

	res = [f"\t\t\t<tr><td><a href='{convert(href)}'>{title.replace('_',' ')}</a></td></tr>" for [title,href] in res]
	res = "<table>\n" + "\n".join(res) + "\n\t\t</table>"

	if level == 0: res += f'\n\t\t<br><div style="font-size:16px">Uppdaterad {yymmddhhmmss()}</div>'
	indexHtml = res if indexHtml == "" else indexHtml.replace("AUTO",res)
	if indexHtml: wrapHtml('directory ' + name, path + '/index.html', name, level+1, indexHtml)

def MD2HTML(long): 
	with open(long,encoding='utf8') as f: return patch(mdit.render(f.read()))

start = time.time_ns()
transpileDir(ROOT)
print(sys.version,round((time.time_ns() - start)/10**6),'ms')